{"version":3,"file":"customerinfo-6f3da06e.js","mappings":"wRA0DA,cACI,WAAYA,GACR,QAAK,UAACA,IAAM,K,OA+HR,EAAAC,aAAoC,SAAOC,GAAK,kD,0GACpDA,EAAMC,iBACA,EAQFC,KAAKJ,MAPLK,EAAS,YACTC,EAAS,YACTC,EAAU,aACVC,EAAO,UACPC,EAAW,cACXC,EAAI,OACJC,EAAwB,2BAGZ,IAAbN,GAAsC,IAAnBC,EAAUM,OAAmC,IAApBL,EAAWK,OAAgC,IAAjBJ,EAAQI,MAA9E,QACCR,KAAKS,SAAS,CAACC,WAAW,IAEvBC,SAASC,eAAe,iBACnBC,EAAiBF,SAASC,eAAe,gBACvCE,EAAkBD,EAAWE,WAAWC,UAAUC,UACpDC,GAASZ,aAAI,EAAJA,EAAMa,KAAM,GAEtBL,GAAyB,IAAVI,GACVE,OAAU,EACVC,OAAc,EACdC,OAAW,EACXC,OAAa,EAEkB,IAAhClB,aAAW,EAAXA,EAAaH,UAAUsB,QAAkBtB,EAC3B,GAAMF,KAAKyB,wBAAwBP,EAAQ,YAAahB,EAAWY,IADjF,OANJ,QALJ,Q,cAYSM,EAAa,S,aAEA,SAAMpB,KAAK0B,wBAAwBR,EAAQb,aAAW,EAAXA,EAAaH,UAAUyB,SAAU,YAAazB,EAAWY,I,OAAjHM,EAAa,S,wBAEmB,IAAjCf,aAAW,EAAXA,EAAaF,WAAWqB,QAAkBrB,EACxB,GAAMH,KAAKyB,wBAAwBP,EAAQ,aAAcf,EAAYW,IADvF,M,cACCO,EAAiB,S,aAEA,SAAMrB,KAAK0B,wBAAwBR,EAAQb,aAAW,EAAXA,EAAaF,WAAWwB,SAAU,aAAcxB,EAAYW,I,OAAxHO,EAAiB,S,wBAEY,IAA9BhB,aAAW,EAAXA,EAAaD,QAAQoB,QAAkBpB,EACxB,GAAMJ,KAAKyB,wBAAwBP,EAAQ,UAAWd,EAASU,IAD9E,O,cACCQ,EAAc,S,eAEA,SAAMtB,KAAK0B,wBAAwBR,EAAQb,aAAW,EAAXA,EAAaD,QAAQuB,SAAU,UAAWvB,EAASU,I,QAA5GQ,EAAc,S,0BAEiB,IAAhCjB,aAAW,EAAXA,EAAaJ,UAAUuB,QAAkBvB,EACxB,GAAMD,KAAKyB,wBAAwBP,EAAQ,YAAajB,EAAWa,IADpF,O,eACCS,EAAgB,S,eAEA,SAAMvB,KAAK0B,wBAAwBR,EAAQb,aAAW,EAAXA,EAAaJ,UAAU0B,SAAU,YAAa1B,EAAWa,I,QAApHS,EAAgB,S,mBAGH,GAAdH,GAAqC,GAAlBC,GAAsC,GAAfC,GAAqC,GAAjBC,GAC7DvB,KAAKS,SAAS,CAACmB,mBAAmB,IAClCrB,EAAyBW,EAAQJ,KAEjCd,KAAKS,SAAS,CAACmB,mBAAmB,IAClC5B,KAAKS,SAAS,CAACC,WAAW,K,qCAOtC,EAAAe,wBAA+F,SAAOI,EAAQC,EAAKC,EAAOjB,GAAW,kD,yEA4BzI,OAzBIkB,EADM,aAAPF,EACYC,EAEAA,EAAMvB,MAEjByB,EAAkB,qKAIeJ,EAAM,2BAAmBC,EAAG,sBAAcE,EAAQ,0dAiBvF,GAAME,MAAM,WAAY,CACpBC,OAAQ,OACRC,YAAa,cACbC,QAAS,CACL,eAAgB,mBAChB,cAAiB,iBAAUvB,IAE/BwB,KAAMC,KAAKC,UAAU,CACjBC,MAAOR,MAEZS,MAAK,SAAAC,GAAO,OAAAA,EAAIC,MAAJ,IAAYF,MAAK,SAAAC,GAC5B,OAAGA,GAAOA,EAAIE,MAAQF,EAAIE,KAAKvC,MAAQqC,EAAIE,KAAKvC,KAAKwC,oBAAoBC,WAAaJ,EAAIE,KAAKvC,KAAKwC,oBAAoBC,UAAUC,SACvHL,EAAIE,KAAKvC,KAAKwC,oBAAoBC,UAAUC,SAE5C,CAEf,K,cAhBA,S,YAmBI,EAAAtB,wBAA8G,SAAOG,EAAQF,EAAUG,EAAKC,EAAOjB,GAAW,kD,yEA4BlK,OAzBIkB,EADM,aAAPF,EACYC,EAEAA,EAAMvB,MAEjByB,EAAkB,qKAIeJ,EAAM,2BAAmBC,EAAG,sBAAcE,EAAQ,kCAA0BL,EAAQ,wdAiBzH,GAAMO,MAAM,WAAY,CACpBC,OAAQ,OACRC,YAAa,cACbC,QAAS,CACL,eAAgB,mBAChB,cAAiB,iBAAUvB,IAE/BwB,KAAMC,KAAKC,UAAU,CACjBC,MAAOR,MAEZS,MAAK,SAAAC,GAAO,OAAAA,EAAIC,MAAJ,IAAYF,MAAK,SAAAC,GAC5B,OAAGA,GAAOA,EAAIE,MAAQF,EAAIE,KAAKvC,MAAQqC,EAAIE,KAAKvC,KAAK2C,oBAAoBF,WAAaJ,EAAIE,KAAKvC,KAAK2C,oBAAoBF,UAAUC,SACvHL,EAAIE,KAAKvC,KAAK2C,oBAAoBF,UAAUC,SAE5C,CAEf,K,cAhBA,S,YAnQA,EAAKE,MAAQ,CACTC,cAAe,EACfzC,WAAW,EACXkB,mBAAmB,G,CAE3B,CAgRJ,OAzR4B,oBAWxB,YAAAwB,kBAAA,WAEQ,IAAAC,EACArD,KAAKJ,MAAK,SAEXyD,GAAYA,EAASC,eAAiBD,EAASC,cAAcnC,IAC5DnB,KAAKS,SAAS,CAAC0C,cAAeE,EAASC,cAAcnC,IAE7D,EAEA,YAAAoC,OAAA,WACU,MAQFvD,KAAKJ,MAPL4D,EAAQ,WACRC,EAAgB,mBAChBxD,EAAS,YACTC,EAAS,YACTC,EAAU,aACVC,EAAO,UACPsD,EAAsB,yBAGpB,EAIF1D,KAAKkD,MAHLC,EAAa,gBACbzC,EAAS,YACTkB,EAAiB,oBAGrB,OACI,wBACA+B,UAAU,gBACVxC,GAAG,kCAAkCyC,SAAU5D,KAAKH,cAEpD,gBAAC,IAAQ,KACL,uBAAK8D,UAAU,qBACV/B,GACG,gBAAC,EAAAiC,EAAK,CAACC,KAAM,IAAUC,OAAO,gBAAC,IAAgB,CAAC5C,GAAG,gCAGnDqC,EAASQ,KAAI,SAACC,EAAWC,GACrB,uCAEQD,GAA+B,YAAlBA,EAAUH,KACnB,gCACMG,EAAUE,UAAUH,KAAI,SAACI,EAAUC,GAClC,OAAQ,gCACDD,GAAYjB,GACV,uBACIrB,IAAKoC,EACLP,UAAW,6BAAsBD,GAA0B,wBAE3D,uBAAKC,UAAU,aAAa7B,IAAKuC,GAC7B,gBAAC,IAAK,CACFC,QAASL,EAAUM,cAElBN,EAAUzD,OAEf,gBAAC,KAAM,CACHW,GAAI8C,EAAUM,aAAY,aACdN,EAAUzD,MACtBgE,KAAMP,EAAUzD,MAChBiE,QAASR,EAAUQ,QACnB1C,MAAiC,aAA1BkC,EAAUM,aAA8BrE,EAAuC,cAA1B+D,EAAUM,aAA+BpE,EAAaC,EAClHsE,SAAU,SAAC3C,GAAU,OAAC0B,EAAiBQ,EAAUM,aAAexC,EAA3C,MAM7C,KAGR,uBACID,IAAKoC,EACLP,UAAW,6BAAsBD,GAA0B,wBAE3D,uBAAKC,UAAU,aAAa7B,IAAKoC,EAAQ,KACrC,gBAAC,IAAS,CACN/C,GAAI8C,EAAUM,aACdC,KAAMP,EAAUzD,MAChBkE,SAAU,SAAC5E,GAAU,OAAC2D,EAAiBQ,EAAUM,aAAezE,EAAM6E,OAAO5C,MAAxD,EACrB6C,YAAaX,EAAUzD,MACvBqE,OAAQ,UAAGZ,EAAUM,aAAY,YAAI,QACrCT,KAAM,OACN/B,MAAO9B,EACP6E,oBAAsB5E,GAAgC,kBAAnBA,EAAU6B,MAA6B,iBAAmB,GAC7F2B,uBAAwBA,IAE5B,gBAAC,IAAK,CACFY,QAASL,EAAUM,aACnBb,uBAAwBA,GAEvBO,EAAUzD,SApD/B,MA+DhB,uBAAKmD,UAAU,gBACX,gBAAC,KAAM,CACHoB,SAAuB,IAAb9E,GAAsC,IAAnBC,EAAUM,OAAmC,IAApBL,EAAWK,OAAgC,IAAjBJ,EAAQI,MACxFW,GAAG,+BACHT,UAAWA,EACXmE,OAAO,+BACPf,KAAK,SACLkB,QAAS,KAAcC,SAEvB,gBAAC,IAAgB,CAAC9D,GAAG,4BAKrC,EA0JJ,EAzRA,CAA4B,EAAA+D,WA2RrB,SAASC,EAAmB,G,IAI3B,EAHS,gBAQI,KAJTC,EAAW,cACXC,EAAO,UACPC,EAAS,YAIXjC,EAAW+B,IACX9E,EAAO+E,IACPE,EAASD,IAEf,OAAKjC,GAAakC,GAAWjF,EAItB,CACH+C,SAAQ,EACR/C,KAAI,EACJoD,wBAAwB,OAAuB6B,EAAOC,mBAN/C,IAQf,CAEA,SAAe,OAAaL,EAA5B,CAAgDM,E","sources":["webpack://checkout/./packages/core/src/app/customerinfos/CustomerInfos.tsx"],"sourcesContent":["import React, { Component, ReactNode } from 'react';\nimport { Customer, Cart } from '@bigcommerce/checkout-sdk';\nimport { Fieldset } from '../ui/form';\nimport { Button, ButtonVariant } from '../ui/button';\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport Select from \"react-select\";\nimport TextInput from '../ui/form/TextInput';\nimport { CheckoutContextProps } from '@bigcommerce/checkout/payment-integration-api';\nimport { withCheckout } from '../checkout';\nimport { Alert, AlertType } from '../ui/alert';\nimport { isFloatingLabelEnabled } from '../common/utility';\nimport Label from '../ui/form/Label';\n\nexport interface CustomerInfoItems {\n    group_ids: [];\n    label: string;\n    metafieldKey: string;\n    options: [];\n    type: string;\n}\n\nexport interface CustomerInfoValues {\n    label: string;\n    value: string;\n}\n\nexport interface CustomerInfoData {\n    valid: boolean;\n    entityID: Number;\n}\n\nexport interface CustomerInfoMetaFields {\n    budgeting: CustomerInfoData;\n    program_id: CustomerInfoData;\n    bottler: CustomerInfoData;\n    po_number: CustomerInfoData;\n}\n\nexport interface CustomerInfosProps {\n    infoData: CustomerInfoItems[];\n    infoUpdated?: CustomerInfoMetaFields;\n    budgeting: CustomerInfoValues;\n    program_id: CustomerInfoValues;\n    bottler: CustomerInfoValues;\n    po_number: string;\n    handleInfoChange?: any;\n    handleCustomerInfoUpdate?: any;\n    customer?: Customer;\n    cart?: Cart;\n    isFloatingLabelEnabled?: boolean;\n}\n\nexport interface CustomerInfosState {\n    customerGrpId: Number;\n    isLoading: boolean;\n    customerInfoError: boolean;\n}\n\nclass CustomerInfos extends Component<CustomerInfosProps, CustomerInfosState> {\n    constructor(props: CustomerInfosProps) {\n        super(props);\n\n        this.state = {\n            customerGrpId: 0,\n            isLoading: false,\n            customerInfoError: false\n        };\n    }\n\n    componentDidMount(): void {\n        const {\n            customer\n        } = this.props;\n\n        if(customer && customer.customerGroup && customer.customerGroup.id) {\n            this.setState({customerGrpId: customer.customerGroup.id});\n        }\n    }\n\n    render(): ReactNode {\n        const {\n            infoData,\n            handleInfoChange,\n            po_number,\n            budgeting,\n            program_id,\n            bottler,\n            isFloatingLabelEnabled\n        } = this.props;\n\n        const {\n            customerGrpId,\n            isLoading,\n            customerInfoError\n        } = this.state;\n\n        return (\n            <form\n            className=\"checkout-form\"\n            id=\"checkout-customerInfo-returning\" onSubmit={this.handlesubmit}\n        >\n            <Fieldset>\n                <div className=\"customerInfo-form\">\n                    {customerInfoError && (\n                        <Alert type={AlertType.Error}><TranslatedString id=\"customerInfo.error_message\" /></Alert>\n                    )}\n                    {\n                        infoData.map((infoField, index) => \n                            <>\n                                {\n                                    infoField && infoField.type == \"dropdown\" ?\n                                        <> \n                                            { infoField.group_ids.map((customId, cusIndex) => {\n                                               return  <>\n                                                    { customId == customerGrpId &&\n                                                        <div\n                                                            key={index}\n                                                            className={`dynamic-form-field ${isFloatingLabelEnabled && 'floating-form-field'}`}\n                                                        >\n                                                            <div className='form-field' key={cusIndex}>\n                                                                <Label\n                                                                    htmlFor={infoField.metafieldKey}\n                                                                >\n                                                                    {infoField.label}\n                                                                </Label>\n                                                                <Select\n                                                                    id={infoField.metafieldKey}\n                                                                    aria-label={infoField.label}\n                                                                    name={infoField.label}\n                                                                    options={infoField.options}\n                                                                    value={infoField.metafieldKey == \"budgeting\" ? budgeting : (infoField.metafieldKey == \"program_id\" ? program_id : bottler)}\n                                                                    onChange={(value) => (handleInfoChange(infoField.metafieldKey , value))}\n                                                                />\n                                                            </div>\n                                                        </div>\n                                                    }\n                                                </>\n                                            })}\n                                        </>\n                                    :\n                                    <div\n                                        key={index}\n                                        className={`dynamic-form-field ${isFloatingLabelEnabled && 'floating-form-field'}`}\n                                    >\n                                        <div className='form-field' key={index + \"1\"}>\n                                            <TextInput\n                                                id={infoField.metafieldKey}\n                                                name={infoField.label}\n                                                onChange={(event) => (handleInfoChange(infoField.metafieldKey , event.target.value))}\n                                                placeholder={infoField.label}\n                                                testId={`${infoField.metafieldKey}-${'text'}`}\n                                                type={'text'}\n                                                value={po_number}\n                                                additionalClassName={(budgeting && budgeting.value == '100% BODYARMOR') ? \"input_disabled\" : \"\"}\n                                                isFloatingLabelEnabled={isFloatingLabelEnabled}\n                                            />\n                                            <Label\n                                                htmlFor={infoField.metafieldKey}\n                                                isFloatingLabelEnabled={isFloatingLabelEnabled}\n                                            >\n                                                {infoField.label}\n                                            </Label>\n                                        </div>\n                                    </div>\n                                }\n                            </>\n                        )\n                    }\n                </div>\n            </Fieldset>\n\n            <div className=\"form-actions\">\n                <Button\n                    disabled={po_number == \"\" || budgeting.label == \"\" || program_id.label == \"\" || bottler.label == \"\"}\n                    id=\"checkout-customerInfo-create\"\n                    isLoading={isLoading}\n                    testId=\"customer-customerInfo-create\"\n                    type=\"submit\"\n                    variant={ButtonVariant.Primary}\n                >\n                    <TranslatedString id=\"customerInfo.continue\" />\n                </Button>\n            </div>\n        </form>\n        )\n    }\n\n    private handlesubmit: (event:any) => void = async (event) => {\n        event.preventDefault();\n        const {\n            po_number,\n            budgeting,\n            program_id,\n            bottler,\n            infoUpdated,\n            cart,\n            handleCustomerInfoUpdate\n        } = this.props;\n\n        if(po_number != \"\" && budgeting.label != \"\" && program_id.label != \"\" && bottler.label != \"\") {\n            this.setState({isLoading: true});\n\n            if(document.getElementById(\"dealerScript\")) {\n                let scriptElem:any = document.getElementById(\"dealerScript\");\n                const bearerToken:any = scriptElem.attributes.store_api.nodeValue;\n                let cartID = cart?.id || \"\";\n\n                if(bearerToken && cartID != \"\") {\n                    let budgetData:any;\n                    let program_idData:any;\n                    let bottlerData:any;\n                    let po_numberData:any;\n\n                    if(infoUpdated?.budgeting.valid == false && budgeting) {\n                        budgetData = await this.createMetaFieldsGraphQL(cartID, \"budgeting\", budgeting, bearerToken);\n                    } else {\n                        budgetData = await this.updateMetaFieldsGraphQL(cartID, infoUpdated?.budgeting.entityID, \"budgeting\", budgeting, bearerToken);\n                    }\n                    if(infoUpdated?.program_id.valid == false && program_id) {\n                        program_idData = await this.createMetaFieldsGraphQL(cartID, \"program_id\", program_id, bearerToken);\n                    } else {\n                        program_idData = await this.updateMetaFieldsGraphQL(cartID, infoUpdated?.program_id.entityID, \"program_id\", program_id, bearerToken);\n                    }\n                    if(infoUpdated?.bottler.valid == false && bottler) {\n                        bottlerData = await this.createMetaFieldsGraphQL(cartID, \"bottler\", bottler, bearerToken);\n                    } else {\n                        bottlerData = await this.updateMetaFieldsGraphQL(cartID, infoUpdated?.bottler.entityID, \"bottler\", bottler, bearerToken);\n                    }\n                    if(infoUpdated?.po_number.valid == false && po_number) {\n                        po_numberData = await this.createMetaFieldsGraphQL(cartID, \"po_number\", po_number, bearerToken);\n                    } else {\n                        po_numberData = await this.updateMetaFieldsGraphQL(cartID, infoUpdated?.po_number.entityID, \"po_number\", po_number, bearerToken);\n                    }\n\n                    if(budgetData != 0 && program_idData != 0 && bottlerData != 0 && po_numberData != 0) {\n                        this.setState({customerInfoError: false});\n                        handleCustomerInfoUpdate(cartID, bearerToken);\n                    } else {\n                        this.setState({customerInfoError: true});\n                        this.setState({isLoading: false});\n                    }\n                }\n            }\n        }\n    }\n\n    private createMetaFieldsGraphQL: (cartId: string, key: string, value: any, bearerToken:any ) => void = async (cartId, key, value, bearerToken) => {\n        let keyValue;\n        if(key == \"po_number\") {\n            keyValue = value;\n        } else {\n            keyValue = value.label;\n        }\n        let getOptionsQuery = `\n            mutation createCartMetafield {\n                cart {\n                    createCartMetafield(\n                    input: {cartEntityId: \"${cartId}\", data: {key: \"${key}\", value: \"${keyValue}\"}}\n                    ) {\n                        metafield {\n                            id\n                            entityId\n                            key\n                            value\n                        }\n                        errors {\n                            ... on Error {\n                            message\n                            }\n                        }\n                    }\n                }\n            }\n        `;          \n        await fetch('/graphql', {\n            method: 'POST',\n            credentials: 'same-origin',\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': `Bearer ${bearerToken}`\n            },\n            body: JSON.stringify({\n                query: getOptionsQuery\n            })\n        }).then(res => res.json()).then(res => {\n            if(res && res.data && res.data.cart && res.data.cart.createCartMetafield.metafield && res.data.cart.createCartMetafield.metafield.entityId) {\n                return res.data.cart.createCartMetafield.metafield.entityId;\n            } else {\n                return 0;\n            }\n        });\n    }\n\n    private updateMetaFieldsGraphQL: (cartId: string, entityID: any, key: string, value: any, bearerToken:any ) => void = async (cartId, entityID, key, value, bearerToken) => {\n        let keyValue;\n        if(key == \"po_number\") {\n            keyValue = value;\n        } else {\n            keyValue = value.label;\n        }\n        let getOptionsQuery = `\n            mutation updateCartMetafield {\n                cart {\n                    updateCartMetafield(\n                    input: {cartEntityId: \"${cartId}\", data: {key: \"${key}\", value: \"${keyValue}\"}, metafieldEntityId: ${entityID}}\n                    ) {\n                        metafield {\n                            id\n                            entityId\n                            key\n                            value\n                        }\n                        errors {\n                            ... on Error {\n                            message\n                            }\n                        }\n                    }\n                }\n            }\n        `;          \n        await fetch('/graphql', {\n            method: 'POST',\n            credentials: 'same-origin',\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': `Bearer ${bearerToken}`\n            },\n            body: JSON.stringify({\n                query: getOptionsQuery\n            })\n        }).then(res => res.json()).then(res => {\n            if(res && res.data && res.data.cart && res.data.cart.updateCartMetafield.metafield && res.data.cart.updateCartMetafield.metafield.entityId) {\n                return res.data.cart.updateCartMetafield.metafield.entityId;\n            } else {\n                return 0;\n            }\n        });\n    }\n}\n\nexport function mapToShippingProps({\n    checkoutState,\n}: CheckoutContextProps) {\n    const {\n        data: {\n            getCustomer,\n            getCart,\n            getConfig,\n        },\n    } = checkoutState;\n\n    const customer = getCustomer();\n    const cart = getCart();\n    const config = getConfig();\n\n    if (!customer || !config || !cart) {\n        return null;\n    }\n\n    return {\n        customer,\n        cart,\n        isFloatingLabelEnabled: isFloatingLabelEnabled(config.checkoutSettings)\n    };\n}\n\nexport default withCheckout(mapToShippingProps)(CustomerInfos);\n"],"names":["props","handlesubmit","event","preventDefault","this","po_number","budgeting","program_id","bottler","infoUpdated","cart","handleCustomerInfoUpdate","label","setState","isLoading","document","getElementById","scriptElem","bearerToken","attributes","store_api","nodeValue","cartID","id","budgetData","program_idData","bottlerData","po_numberData","valid","createMetaFieldsGraphQL","updateMetaFieldsGraphQL","entityID","customerInfoError","cartId","key","value","keyValue","getOptionsQuery","fetch","method","credentials","headers","body","JSON","stringify","query","then","res","json","data","createCartMetafield","metafield","entityId","updateCartMetafield","state","customerGrpId","componentDidMount","customer","customerGroup","render","infoData","handleInfoChange","isFloatingLabelEnabled","className","onSubmit","A","type","Error","map","infoField","index","group_ids","customId","cusIndex","htmlFor","metafieldKey","name","options","onChange","target","placeholder","testId","additionalClassName","disabled","variant","Primary","Component","mapToShippingProps","getCustomer","getCart","getConfig","config","checkoutSettings","CustomerInfos"],"sourceRoot":""}